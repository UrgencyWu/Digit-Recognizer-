{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":3004,"databundleVersionId":861823,"sourceType":"competition"}],"dockerImageVersionId":30840,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# 导入必要的库\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.optimizers import Adam\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T10:32:09.235401Z","iopub.execute_input":"2025-01-29T10:32:09.235706Z","iopub.status.idle":"2025-01-29T10:32:09.240213Z","shell.execute_reply.started":"2025-01-29T10:32:09.235683Z","shell.execute_reply":"2025-01-29T10:32:09.239285Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"\n# 1️⃣ 读取数据\ntrain = pd.read_csv(\"/kaggle/input/digit-recognizer/train.csv\")  # 读取训练数据集\ntest = pd.read_csv(\"/kaggle/input/digit-recognizer/test.csv\")    # 读取测试数据集\n\n# 2️⃣ 分离特征和标签\ny_train = train[\"label\"].values  # 提取标签 (0-9)\nX_train = train.drop(\"label\", axis=1).values  # 提取像素数据\nX_test = test.values  # 测试集没有标签，直接取所有数据\n\n# 3️⃣ 归一化数据\nX_train = X_train / 255.0  # 归一化到 [0,1]，有助于模型训练\nX_test = X_test / 255.0  # 同样归一化测试集\n\n# 4️⃣ 重塑数据格式 (Reshape)\nX_train = X_train.reshape(-1, 28, 28, 1)  # 变成 CNN 需要的格式 (n,28,28,1)\nX_test = X_test.reshape(-1, 28, 28, 1)\n\n# 5️⃣ One-hot 编码标签\ny_train = to_categorical(y_train, num_classes=10)  # 把 0-9 转换为 10 维向量\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T10:32:09.254375Z","iopub.execute_input":"2025-01-29T10:32:09.254582Z","iopub.status.idle":"2025-01-29T10:32:13.482604Z","shell.execute_reply.started":"2025-01-29T10:32:09.254564Z","shell.execute_reply":"2025-01-29T10:32:13.481906Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# 6️⃣ 拆分训练集和验证集\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.1, random_state=42)\n# 90% 训练，10% 用于验证，防止过拟合\n\n# 7️⃣ 定义数据增强 (Data Augmentation)\ndatagen = ImageDataGenerator(\n    rotation_range=10,    # 旋转 ±10 度\n    zoom_range=0.1,       # 随机缩放 ±10%\n    width_shift_range=0.1, # 水平平移 ±10%\n    height_shift_range=0.1 # 垂直平移 ±10%\n)\ndatagen.fit(X_train)  # 让数据增强器适配训练数据\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T10:32:13.483598Z","iopub.execute_input":"2025-01-29T10:32:13.483805Z","iopub.status.idle":"2025-01-29T10:32:13.944508Z","shell.execute_reply.started":"2025-01-29T10:32:13.483786Z","shell.execute_reply":"2025-01-29T10:32:13.943340Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"\n\n# 8️⃣ 构建 CNN 模型\nmodel = Sequential([\n\n    # 第一层卷积层 + 批量归一化 + 池化\n    Conv2D(32, (3,3), activation=\"relu\", padding=\"same\", input_shape=(28, 28, 1)),  # 卷积核 3x3，32 个滤波器\n    BatchNormalization(),  # 归一化，提高稳定性\n    Conv2D(32, (3,3), activation=\"relu\", padding=\"same\"),  # 第二个卷积层\n    MaxPooling2D(2,2),  # 2x2 池化，减少尺寸\n    Dropout(0.25),  # 随机丢弃 25% 的神经元，防止过拟合\n\n    # 第二层卷积层\n    Conv2D(64, (3,3), activation=\"relu\", padding=\"same\"),\n    BatchNormalization(),\n    Conv2D(64, (3,3), activation=\"relu\", padding=\"same\"),\n    MaxPooling2D(2,2),\n    Dropout(0.25),\n\n    # 第三层卷积层\n    Conv2D(128, (3,3), activation=\"relu\", padding=\"same\"),\n    BatchNormalization(),\n    Conv2D(128, (3,3), activation=\"relu\", padding=\"same\"),\n    MaxPooling2D(2,2),\n    Dropout(0.25),\n\n    # 展平成全连接层\n    Flatten(),\n    Dense(256, activation=\"relu\"),  # 全连接层 256 神经元\n    Dropout(0.5),  # 丢弃 50%，防止过拟合\n    Dense(10, activation=\"softmax\")  # 输出层，10 类（0-9），使用 softmax 归一化\n])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T10:32:13.946685Z","iopub.execute_input":"2025-01-29T10:32:13.947047Z","iopub.status.idle":"2025-01-29T10:32:16.159260Z","shell.execute_reply.started":"2025-01-29T10:32:13.947013Z","shell.execute_reply":"2025-01-29T10:32:16.158600Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"\n# 9️⃣ 编译模型\nmodel.compile(optimizer=Adam(learning_rate=0.001),  # Adam 优化器，学习率 0.001\n              loss=\"categorical_crossentropy\",  # 交叉熵损失（适用于分类任务）\n              metrics=[\"accuracy\"])  # 监控准确率\n\n# 🔟 训练模型（使用数据增强）\nhistory = model.fit(datagen.flow(X_train, y_train, batch_size=64),  # 用增强数据训练\n                    epochs=20,  # 训练 20 轮\n                    validation_data=(X_val, y_val))  # 验证数据集\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T10:32:16.160680Z","iopub.execute_input":"2025-01-29T10:32:16.161002Z","iopub.status.idle":"2025-01-29T10:36:29.933702Z","shell.execute_reply.started":"2025-01-29T10:32:16.160954Z","shell.execute_reply":"2025-01-29T10:36:29.932833Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/20\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n  self._warn_if_super_not_called()\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 30ms/step - accuracy: 0.6680 - loss: 1.0529 - val_accuracy: 0.9698 - val_loss: 0.0957\nEpoch 2/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9554 - loss: 0.1556 - val_accuracy: 0.9869 - val_loss: 0.0437\nEpoch 3/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 21ms/step - accuracy: 0.9722 - loss: 0.1013 - val_accuracy: 0.9838 - val_loss: 0.0539\nEpoch 4/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9740 - loss: 0.0935 - val_accuracy: 0.9871 - val_loss: 0.0481\nEpoch 5/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9760 - loss: 0.0880 - val_accuracy: 0.9912 - val_loss: 0.0344\nEpoch 6/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 21ms/step - accuracy: 0.9782 - loss: 0.0809 - val_accuracy: 0.9879 - val_loss: 0.0401\nEpoch 7/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9816 - loss: 0.0654 - val_accuracy: 0.9917 - val_loss: 0.0288\nEpoch 8/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9831 - loss: 0.0624 - val_accuracy: 0.9893 - val_loss: 0.0378\nEpoch 9/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9811 - loss: 0.0646 - val_accuracy: 0.9912 - val_loss: 0.0297\nEpoch 10/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9843 - loss: 0.0577 - val_accuracy: 0.9924 - val_loss: 0.0307\nEpoch 11/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9853 - loss: 0.0531 - val_accuracy: 0.9926 - val_loss: 0.0244\nEpoch 12/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9867 - loss: 0.0476 - val_accuracy: 0.9893 - val_loss: 0.0396\nEpoch 13/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9866 - loss: 0.0486 - val_accuracy: 0.9881 - val_loss: 0.0512\nEpoch 14/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9879 - loss: 0.0477 - val_accuracy: 0.9938 - val_loss: 0.0209\nEpoch 15/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9888 - loss: 0.0416 - val_accuracy: 0.9924 - val_loss: 0.0306\nEpoch 16/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9885 - loss: 0.0454 - val_accuracy: 0.9926 - val_loss: 0.0298\nEpoch 17/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9876 - loss: 0.0475 - val_accuracy: 0.9902 - val_loss: 0.0396\nEpoch 18/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9894 - loss: 0.0391 - val_accuracy: 0.9921 - val_loss: 0.0343\nEpoch 19/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9885 - loss: 0.0450 - val_accuracy: 0.9907 - val_loss: 0.0387\nEpoch 20/20\n\u001b[1m591/591\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 20ms/step - accuracy: 0.9911 - loss: 0.0354 - val_accuracy: 0.9921 - val_loss: 0.0345\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"\n# 1️⃣1️⃣ 画出训练曲线\nplt.plot(history.history[\"accuracy\"], label=\"Train Accuracy\")  # 训练准确率\nplt.plot(history.history[\"val_accuracy\"], label=\"Val Accuracy\")  # 验证准确率\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T10:36:29.934894Z","iopub.execute_input":"2025-01-29T10:36:29.935246Z","iopub.status.idle":"2025-01-29T10:36:30.164690Z","shell.execute_reply.started":"2025-01-29T10:36:29.935211Z","shell.execute_reply":"2025-01-29T10:36:30.163915Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"\n\n# 1️⃣2️⃣ 计算验证集准确率\nval_loss, val_acc = model.evaluate(X_val, y_val)  # 在验证集上评估\nprint(f\"验证集准确率: {val_acc:.4f}\")  # 输出最终准确率\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T10:36:30.165567Z","iopub.execute_input":"2025-01-29T10:36:30.165875Z","iopub.status.idle":"2025-01-29T10:36:30.470880Z","shell.execute_reply.started":"2025-01-29T10:36:30.165841Z","shell.execute_reply":"2025-01-29T10:36:30.470066Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m132/132\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9928 - loss: 0.0323\n验证集准确率: 0.9921\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# 1️⃣3️⃣ 生成测试集预测\npredictions = model.predict(X_test)  # 对测试集进行预测\npredictions = np.argmax(predictions, axis=1)  # 取概率最高的类别\n\n# 1️⃣4️⃣ 生成 Kaggle 提交文件\nsubmission = pd.DataFrame({\"ImageId\": np.arange(1, len(predictions)+1), \"Label\": predictions})\nsubmission.to_csv(\"submission.csv\", index=False)  # 保存 CSV 文件\nprint(\"✅ 提交文件已生成: submission.csv\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-29T10:36:30.471630Z","iopub.execute_input":"2025-01-29T10:36:30.471843Z","iopub.status.idle":"2025-01-29T10:36:32.797096Z","shell.execute_reply.started":"2025-01-29T10:36:30.471824Z","shell.execute_reply":"2025-01-29T10:36:32.796354Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m875/875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 1ms/step\n✅ 提交文件已生成: submission.csv\n","output_type":"stream"}],"execution_count":10}]}